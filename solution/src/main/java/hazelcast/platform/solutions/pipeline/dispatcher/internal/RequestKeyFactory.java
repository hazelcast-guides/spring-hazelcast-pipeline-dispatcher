package hazelcast.platform.solutions.pipeline.dispatcher.internal;

import org.springframework.stereotype.Component;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;


/**
 * Generates unique request keys.  This class is safe for concurrent access.
 */
@Component
public class RequestKeyFactory {
    private ConcurrentHashMap<String, AtomicLong> requestIdMap;

    public RequestKeyFactory(){
        requestIdMap = new ConcurrentHashMap<>();
    }

    public RequestKey newRequestKey(String clientID){
        AtomicLong nextId = requestIdMap.computeIfAbsent(clientID, k -> new AtomicLong());
        RequestKey result = new RequestKey();
        result.setClientId(clientID);
        result.setRequestId(nextId.getAndIncrement());
        return result;
    }

    /**
     * A client must provide a unique client id with all of its requests.  The client should
     * generate or obtain the unique id once and then re-use if for every request thereafter.
     *
     * This is a utility method for generating a random client id.  Client ids can be any
     * unique string.  They do not have to be generated by this method but they do need
     * to be unique across all clients connected to one cluster.
     *
     * @return a new, randomly generated client id
     */
    public String newRandomClientId(){
        return UUID.randomUUID().toString();
    }

}
